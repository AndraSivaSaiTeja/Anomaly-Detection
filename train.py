# -*- coding: utf-8 -*-
"""Copy of train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mz3TADbWBZA_Q9QsBGWC0wGHKrzbx308
"""

from pathlib import Path
from tqdm import tqdm
import matplotlib.pyplot as plt
import datetime
import argparse
#from str2bool import str2bool
import torch
import sys
from torch import optim
from torch.utils.data import DataLoader
from torch.optim.lr_scheduler import CosineAnnealingWarmRestarts
#from torch.utils.tensorboard import SummaryWriter
from torchvision import transforms
#import segmentation_models_pytorch as smp

#upload these three files unet_model.py,dataset_cp.py,cutpaste.py from cutpaste code folder and mount drive
from dataset_cp import MVTecAT, Repeat
from unet_model import UNet
from cutpaste import CutPasteNormal,CutPasteScar, CutPaste3Way, CutPasteUnion, cut_paste_collate_fn

def get_mask(normal,anomaly): #inputs are normal and artificial anomalous images (as batch)
    
    diff = (normal-anomaly).bool()

    return torch.logical_or(torch.logical_or(diff[:,0,:,:],diff[:,1,:,:]),diff[:,2,:,:]).int()

def run_training(data_type="screw",
                 model_dir="models",
                 epochs=256,
                 pretrained=True,
                 test_epochs=10,
                 freeze_resnet=20,
                 learninig_rate=0.03,
                 optim_name="SGD",
                 batch_size=64,
                 head_layer=8,
                 cutpate_type=CutPasteNormal,
                 device = "cuda",
                 workers=2, #default changed from 8 to 2
                 size = 256):
    torch.multiprocessing.freeze_support()
    # TODO: use script params for hyperparameter
    # Temperature Hyperparameter currently not used
    temperature = 0.2

    weight_decay = 0.00003
    momentum = 0.9
    #TODO: use f strings also for the date LOL
    model_name = f"model-{data_type}" + '-{date:%Y-%m-%d_%H_%M_%S}'.format(date=datetime.datetime.now() )

    #augmentation:
    min_scale = 1

    # create Training Dataset and Dataloader
    after_cutpaste_transform = transforms.Compose([])
    after_cutpaste_transform.transforms.append(transforms.ToTensor())
    #after_cutpaste_transform.transforms.append(transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                                                    #std=[0.229, 0.224, 0.225])) 
                                                                    #removed for displaying proper anomaly images

    normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],std=[0.229, 0.224, 0.225])
    #to be normalized during training
    
    train_transform = transforms.Compose([])
    #train_transform.transforms.append(transforms.RandomResizedCrop(size, scale=(min_scale,1)))
    train_transform.transforms.append(transforms.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1))
    # train_transform.transforms.append(transforms.GaussianBlur(int(size/10), sigma=(0.1,2.0)))
    train_transform.transforms.append(transforms.Resize((size,size)))
    train_transform.transforms.append(cutpate_type(transform = after_cutpaste_transform))
    # train_transform.transforms.append(transforms.ToTensor())

    train_data = MVTecAT("/home/ubuntu/Anomaly_Detection/Siva/RD_Unified/Data", data_type, transform = train_transform, size=int(size * (1/min_scale)))
    dataloader = DataLoader(Repeat(train_data, 8000), batch_size=batch_size, drop_last=True,
                            shuffle=True, num_workers=workers, collate_fn=cut_paste_collate_fn,
                            persistent_workers=True, pin_memory=True, prefetch_factor=5)
    #dataloader = dataloader.to(device)
    print("data loader",len(dataloader))
    #dl = list(dataloader)
    #print(dl[0][0].shape,dl[0][1].shape,dl[0][2].shape) #all are batch_size*3*256*256

    #for displaying cutpaste anomaly images in dataloader
    # i = 0
    # j = 0
    # plt.imshow(dl[i][0][j].permute(1, 2, 0).numpy()) #Normal Image I
    # plt.show()
    # plt.imshow(dl[i][1][j].permute(1, 2, 0).numpy()) #CutPaste corresponding to I
    # plt.show()
    # plt.imshow(dl[i][2][j].permute(1, 2, 0).numpy()) #CutPaste Scar corresponding to I
    # plt.show()

    model = UNet(n_channels=3,n_classes=1) #output shape is (batch_size,classes,h,w)
    model = model.to(device)
    model.train()
                                                                    #input shape is (batch_size,in_channels,h,w)
    if optim_name == "sgd":
        optimizer = optim.SGD(model.parameters(), lr=learninig_rate, momentum=momentum,  weight_decay=weight_decay)
        scheduler = CosineAnnealingWarmRestarts(optimizer, epochs)
        #scheduler = None
    elif optim_name == "adam":
        optimizer = optim.Adam(model.parameters(), lr=learninig_rate, weight_decay=weight_decay)
        scheduler = None
    else:
        print(f"ERROR unkown optimizer: {optim_name}")

    criterion = torch.nn.CrossEntropyLoss()

    for i in range(1,epochs+1):

      epoch_loss = 0
      for normal,cp,cps in dataloader:


        normal_mask = get_mask(normal,normal)
        cp_mask = get_mask(normal,cp)
        cps_mask = get_mask(normal,cps)

        #for displaying mask
        # plt.imshow(cp[0].permute(1, 2, 0).numpy())
        # plt.show()
        # plt.imshow(cp_mask[0].numpy())
        # plt.show()


        normal = normalize(normal).to(device)
        cp = normalize(cp).to(device)
        cps = normalize(cps).to(device)
        input = torch.cat((normal,cp,cps),dim=0)
        masks = torch.cat((normal_mask,cp_mask,cps_mask))
        output = model(input)
        # print(output.shape)
        loss = criterion(output.squeeze(),masks.float().to(device))
        epoch_loss += loss
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
      print("Epoch [%i/%i]: loss %.4f"%(i,epochs,epoch_loss))
      torch.save(model.state_dict(), model_dir/f"cp_segmentation.tch")

all_types = ['bottle',
             'cable',
             'capsule',
             'carpet',
             'grid',
             'hazelnut',
             'leather',
             'metal_nut',
             'pill',
             'screw',
             'tile',
             'toothbrush',
             'transistor',
             'wood',
             'zipper']

device = "cuda" if torch.cuda.is_available() else "cpu"
#device = 'cpu'
print(f"using device: {device}")
variant_map = {'normal':CutPasteNormal, 'scar':CutPasteScar, '3way':CutPaste3Way, 'union':CutPasteUnion}
variant = variant_map['3way'] #using 3way
for data_type in ['bottle']:#types:
    print(f"training {data_type}")
    run_training(data_type,
                  model_dir="models",
                  epochs=256,
                  pretrained=True,
                  test_epochs=10,
                  freeze_resnet=20,
                  learninig_rate=0.03,
                  optim_name='sgd',
                  batch_size=8,
                  head_layer=1,
                  device=device,
                  cutpate_type=variant,
                  workers=2)

#print("Epoch [%i/epochs]: loss %.4f"%(8,1/85697))
